input { 
    jdbc {#https://www.elastic.co/kr/blog/how-to-keep-elasticsearch-synchronized-with-a-relational-database-using-logstash
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        statement => "SELECT id, title, tag, author, content, url, publisher, post_create_datetime, UNIX_TIMESTAMP(modification_time) AS unix_ts_in_secs FROM raw_table WHERE (UNIX_TIMESTAMP(modification_time) > :sql_last_value AND modification_time < NOW()) ORDER BY modification_time ASC"
        schedule => "* * * * *"

        # 데이터 트레킹을 위해 마지막 데이터 기록시 사용
        tracking_column_type => "numeric"
        
        # false 타임스탬프 사용, true 숫자 사용
        use_column_value => true
        
        # 마지막 컬럼값 기록 여부, true시 0 또는 1970년 1월 1일 부터 시작 => 기록된거부터..
        #false 시 기록된거 부터 시작함
        clean_run => true
        
        #데이터 조회시 페이징 처리를 할 것인지를 설정한다. (쿼리 결과의 ordering은 보장하지 않는다.)
        jdbc_paging_enabled => true

        # 트레킹에 사용할 컬럼
        tracking_column => "unix_ts_in_secs"

        #트래킹한 저장 파일
        last_run_metadata_path => "/usr/share/last_run_metadata/jdbc-int-sql_last_value.yml"

    }
}
filter {
    mutate {
        copy => { "id" => "[@metadata][_id]"}
        remove_field => ["@version", "@timestamp", "id", "unix_ts_in_secs"]
        split => ["tag", " "]#['태그1', '태그2', '태그3'] 형식으로 변환.
    }
}
output {
    elasticsearch {
          hosts => ["elasticsearch:9200"]
          index => "analysis"
          document_id => "%{[@metadata][_id]}"
    }
}